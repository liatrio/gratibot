name: "Pull Request"
on:
  pull_request:
jobs:
  fmt:
    name: "Terraform fmt check"
    runs-on: ubuntu-latest
    container: "liatrio/az-go-tf-tg:0.0.1"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Terraform fmt check
        run: terraform fmt -check -recursive
  validate:
    name: "Terraform validate check"
    runs-on: ubuntu-latest
    container: "liatrio/az-go-tf-tg:0.0.1"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Terraform validate check
        run: terraform validate
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: "1b4a4fed-fed8-4823-a8a0-3d5cea83d122"
  plan:
    name: "Terraform plan"
    runs-on: ubuntu-latest
    container: "liatrio/az-go-tf-tg:0.0.1"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Plan Gratibot staging deployment
        id: plan_gratibot_staging_deployment
        working-directory: tf
        run: |
          terraform plan -out plan.out
          terraform show -no-color plan.out > plan.txt
        continue-on-error: true
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: "1b4a4fed-fed8-4823-a8a0-3d5cea83d122"
      - name: Comment on pull request
        uses: actions/github-script@v3
        with:
          script: |
            const fs = require('fs');
            const output = `
            #### Terragrunt Plan \`${{ steps.plan_gratibot_staging_deployment.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${fs.readFileSync('tf/plan.txt')}\`\`\`
            </details>`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Status
        if: contains(steps.*.outcome, 'failure')
        run: exit 1
