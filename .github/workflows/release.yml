name: "Release"
on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - "catalog.yaml"

  workflow_dispatch:
    inputs:
      gratibot_limit:
        description: "The amount of fistbumps that a user can give for one day."
        required: false
        default: "5"
        type: string

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/gratibot

jobs:
  build:
    name: Build and Publish Image
    if: github.event_name == 'push' || contains(fromJSON('["Pactionly", "gesparza3"]'), github.actor)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Generate tag
        id: tag
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME:${{ steps.tag.outputs.sha_short }} --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: docker push $IMAGE_NAME:${{ steps.tag.outputs.sha_short }}
    outputs:
      docker_tag: ${{ steps.tag.outputs.sha_short }}
  apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    environment:
      name: "nonprod"
    container: "ghcr.io/liatrio/builder-image-azure-terraform:v2.1.0"
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Deploy Gratibot to Nonprod
        working-directory: infra/terragrunt/nonprod/gratibot/
        run: |
          terragrunt apply --terragrunt-non-interactive -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: "1b4a4fed-fed8-4823-a8a0-3d5cea83d122"
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_NONPROD_SUBSCRIPTION_ID }}
          TF_VAR_acr_subscription_id: ${{ secrets.AZURE_NONPROD_SUBSCRIPTION_ID }}
          TF_VAR_gratibot_image: "${{ env.IMAGE_NAME }}:${{ needs.build.outputs.docker_tag }}"
          TF_VAR_app_token: ${{ secrets.NONPROD_APP_TOKEN }}
          TF_VAR_bot_user_token: ${{ secrets.NONPROD_BOT_TOKEN }}
          TF_VAR_gratibot_limit: ${{ inputs.gratibot_limit }}
  release:
    name: "Create Release"
    environment: prod
      name: "prod"
    needs: apply
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install devDependencies
        run: npm install

      - name: Create Release
        run: npm run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

